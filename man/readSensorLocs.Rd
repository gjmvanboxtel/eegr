% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readSensorLocs.R
\name{readSensorLocs}
\alias{readSensorLocs}
\alias{getLocationsfromLabels}
\title{readSensorLocs}
\usage{
readSensorLocs(source = "EEGlocations", type = c("besa", "elp",
  "eeglab", "xyz", "custom"), format = "", select = "all",
  plot = FALSE)

getLocationsfromLabels(labels, plot = FALSE)
}
\arguments{
\item{source}{Character string. The source file or data frame containing the sensor location coordinates.
\code{source} can also be a complete URL. (For the supported URL schemes, see the ‘URLs’ section of the help
for \code{url}). Alternatively, source may be an object of class \code{\link{sensorlocs}} or a 
compatible data frame from which sensor locations may be selected.\cr
Default: \code{EEGlocations}, the \code{sensorlocs} object that comes with \code{eegr}.}

\item{type}{Character string, only used if \code{source} denotes a filename. \code{type} describes the type of
file that the sensor locations are read from. Can be any of:
\describe{
  \item{besa}{BESA spherical coordinates (3,4, or columns)}
  \item{elp}{alias for \code{besa}}
  \item{eeglab}{Cartesian coordinates as used in the EEGLAB package}
  \item{xyz}{Cartesian Polhemus coordinates}
  \item{custom}{custom input type, see the \code{format} parameter}
}}

\item{format}{Character string. Format of data to read when using a \code{custom} source type.
The format string should consist of keyword-expression combinations of the form \code{keyword = (expr)}.
The keyword-expression combinations recognized are:
\describe{
  \item{\code{vars = (var1, var2, ...)}}{The variables to read from the file. Variables can be either label, theta,
   phi, x, y, z, or dummy, separated by commas. The variables should at least contain either theta and phi, or
   x, y, and z. A label is not required, but recognized.}
  \item{\code{adjust = (expr, expr, ...)}}{used for adjusting \code{vars}. \code{expr} is either an expression
   applied to the value read (e.g., '*-1'), or NULL. There should be just as many expressions as there are \code{vars}.}
 \item{\code{skiplines = (x)}}{number of header lines to skip}
}
Example: \code{format='vars = (theta, phi, label),}\cr
\code{adjust = (*90/72, NULL, NULL), skip = (2)'}}

\item{select}{Numeric or character vector, only used if \code{source} denotes a data frame. Specify '\code{all}' (default)
to select all sensors from the \code{source} data frame. Alternatively, a character vector indicating the labels of the
sensors to be selected (a variable named \code{label} should then be present in the data frame), or a numeric vector
specifying the rows from the data frame to be selected.}

\item{plot}{logical, default: FALSE. If \code{TRUE}, make a 2D plot of all sensor locations (top view, nose pointing upward).
Alternatively \code{plot} may be an array of character strings denoting the sensor labels to plot.}

\item{labels}{Character vector indicating the labels of the sensors to be selected}
}
\value{
A data frame of class \code{\link{sensorlocs}} containing x, y, z, x2d, y2d, theta, phi
in the eegr internal format. Other variables in the input data frame or matrix are copied unchanged to the outpuut data frame.
}
\description{
Read sensor locations from an external file or select locations from a data frame.
}
\details{
The function \code{readSensorLocs} reads sensor coordinates from a variety of input sources.
Some well-known file types are supported, such as BESA spherical coordinates, and
EEGLAB and Polhemus Cartesian coordinates. These coordinate systems are converted
by this function to the coordinate system used by \code{eegr} (see \code{\link{sensorlocs}}).

Alternatively, a \code{data.frame} may be specified as the source. This may be useful if standard sensor
locations are used, of which a particular experiment uses a selection (see the \code{select} parameter).

In addition, sensor locations may be read from an external file with a custom format.
In this case (\code{type = 'custom'}), the function expects a format string that specifies
the coordinates (see the \code{format} argument).
}
\examples{
\dontrun{
  readSensorLocs ('/path/to/filename', type = 'besa', plot = TRUE)
  readSensorLocs ('/path/to/filename', type = 'xyz', plot = c('Fz', 'Cz', 'Pz'))
  readSensorLocs (source = '/somestrangeformat.txt', type = 'custom',
               format='vars = (theta, phi, dummy), adjust=(*90/72, NULL, NULL), skip = (2)')
}

locs <- getLocationsfromLabels(c('Fz', 'Cz', 'Pz'), plot = TRUE)

}
\author{
Geert van Boxtel, \email{G.J.M.vanBoxtel@gmail.com}. Please note that I have just implemented some electrode
location files that I encountered. I could use help in making this function more general.
}
